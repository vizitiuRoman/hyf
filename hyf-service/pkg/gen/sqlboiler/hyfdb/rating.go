// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to hyf-service re-generated in place and/or deleted at any time.

package hyfdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Rating is an object representing the database table.
type Rating struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TodoID      null.Int  `boil:"todo_id" json:"todo_id,omitempty" toml:"todo_id" yaml:"todo_id,omitempty"`
	RatedUserID null.Int  `boil:"rated_user_id" json:"rated_user_id,omitempty" toml:"rated_user_id" yaml:"rated_user_id,omitempty"`
	RatingValue int64     `boil:"rating_value" json:"rating_value" toml:"rating_value" yaml:"rating_value"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *ratingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ratingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RatingColumns = struct {
	ID          string
	TodoID      string
	RatedUserID string
	RatingValue string
	CreatedAt   string
}{
	ID:          "id",
	TodoID:      "todo_id",
	RatedUserID: "rated_user_id",
	RatingValue: "rating_value",
	CreatedAt:   "created_at",
}

var RatingTableColumns = struct {
	ID          string
	TodoID      string
	RatedUserID string
	RatingValue string
	CreatedAt   string
}{
	ID:          "rating.id",
	TodoID:      "rating.todo_id",
	RatedUserID: "rating.rated_user_id",
	RatingValue: "rating.rating_value",
	CreatedAt:   "rating.created_at",
}

// Generated where

var RatingWhere = struct {
	ID          whereHelperint64
	TodoID      whereHelpernull_Int
	RatedUserID whereHelpernull_Int
	RatingValue whereHelperint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"rating\".\"id\""},
	TodoID:      whereHelpernull_Int{field: "\"rating\".\"todo_id\""},
	RatedUserID: whereHelpernull_Int{field: "\"rating\".\"rated_user_id\""},
	RatingValue: whereHelperint64{field: "\"rating\".\"rating_value\""},
	CreatedAt:   whereHelpertime_Time{field: "\"rating\".\"created_at\""},
}

// RatingRels is where relationship names are stored.
var RatingRels = struct {
	RatedUser string
	Todo      string
}{
	RatedUser: "RatedUser",
	Todo:      "Todo",
}

// ratingR is where relationships are stored.
type ratingR struct {
	RatedUser *User `boil:"RatedUser" json:"RatedUser" toml:"RatedUser" yaml:"RatedUser"`
	Todo      *Todo `boil:"Todo" json:"Todo" toml:"Todo" yaml:"Todo"`
}

// NewStruct creates a new relationship struct
func (*ratingR) NewStruct() *ratingR {
	return &ratingR{}
}

func (r *ratingR) GetRatedUser() *User {
	if r == nil {
		return nil
	}
	return r.RatedUser
}

func (r *ratingR) GetTodo() *Todo {
	if r == nil {
		return nil
	}
	return r.Todo
}

// ratingL is where Load methods for each relationship are stored.
type ratingL struct{}

var (
	ratingAllColumns            = []string{"id", "todo_id", "rated_user_id", "rating_value", "created_at"}
	ratingColumnsWithoutDefault = []string{"rating_value", "created_at"}
	ratingColumnsWithDefault    = []string{"id", "todo_id", "rated_user_id"}
	ratingPrimaryKeyColumns     = []string{"id"}
	ratingGeneratedColumns      = []string{}
)

type (
	// RatingSlice is an alias for a slice of pointers to Rating.
	// This should almost always hyf-service used instead of []Rating.
	RatingSlice []*Rating
	// RatingHook is the signature for custom Rating hook methods
	RatingHook func(context.Context, boil.ContextExecutor, *Rating) error

	ratingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ratingType                 = reflect.TypeOf(&Rating{})
	ratingMapping              = queries.MakeStructMapping(ratingType)
	ratingPrimaryKeyMapping, _ = queries.BindMapping(ratingType, ratingMapping, ratingPrimaryKeyColumns)
	ratingInsertCacheMut       sync.RWMutex
	ratingInsertCache          = make(map[string]insertCache)
	ratingUpdateCacheMut       sync.RWMutex
	ratingUpdateCache          = make(map[string]updateCache)
	ratingUpsertCacheMut       sync.RWMutex
	ratingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ratingAfterSelectHooks []RatingHook

var ratingBeforeInsertHooks []RatingHook
var ratingAfterInsertHooks []RatingHook

var ratingBeforeUpdateHooks []RatingHook
var ratingAfterUpdateHooks []RatingHook

var ratingBeforeDeleteHooks []RatingHook
var ratingAfterDeleteHooks []RatingHook

var ratingBeforeUpsertHooks []RatingHook
var ratingAfterUpsertHooks []RatingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rating) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rating) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rating) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rating) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rating) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rating) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rating) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rating) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rating) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ratingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRatingHook registers your hook function for all future operations.
func AddRatingHook(hookPoint boil.HookPoint, ratingHook RatingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ratingAfterSelectHooks = append(ratingAfterSelectHooks, ratingHook)
	case boil.BeforeInsertHook:
		ratingBeforeInsertHooks = append(ratingBeforeInsertHooks, ratingHook)
	case boil.AfterInsertHook:
		ratingAfterInsertHooks = append(ratingAfterInsertHooks, ratingHook)
	case boil.BeforeUpdateHook:
		ratingBeforeUpdateHooks = append(ratingBeforeUpdateHooks, ratingHook)
	case boil.AfterUpdateHook:
		ratingAfterUpdateHooks = append(ratingAfterUpdateHooks, ratingHook)
	case boil.BeforeDeleteHook:
		ratingBeforeDeleteHooks = append(ratingBeforeDeleteHooks, ratingHook)
	case boil.AfterDeleteHook:
		ratingAfterDeleteHooks = append(ratingAfterDeleteHooks, ratingHook)
	case boil.BeforeUpsertHook:
		ratingBeforeUpsertHooks = append(ratingBeforeUpsertHooks, ratingHook)
	case boil.AfterUpsertHook:
		ratingAfterUpsertHooks = append(ratingAfterUpsertHooks, ratingHook)
	}
}

// One returns a single rating record from the query.
func (q ratingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rating, error) {
	o := &Rating{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "hyfdb: failed to execute a one query for rating")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Rating records from the query.
func (q ratingQuery) All(ctx context.Context, exec boil.ContextExecutor) (RatingSlice, error) {
	var o []*Rating

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "hyfdb: failed to assign all query results to Rating slice")
	}

	if len(ratingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Rating records in the query.
func (q ratingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: failed to count rating rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ratingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "hyfdb: failed to check if rating exists")
	}

	return count > 0, nil
}

// RatedUser pointed to by the foreign key.
func (o *Rating) RatedUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RatedUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Todo pointed to by the foreign key.
func (o *Rating) Todo(mods ...qm.QueryMod) todoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TodoID),
	}

	queryMods = append(queryMods, mods...)

	return Todos(queryMods...)
}

// LoadRatedUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ratingL) LoadRatedUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRating interface{}, mods queries.Applicator) error {
	var slice []*Rating
	var object *Rating

	if singular {
		var ok bool
		object, ok = maybeRating.(*Rating)
		if !ok {
			object = new(Rating)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRating))
			}
		}
	} else {
		s, ok := maybeRating.(*[]*Rating)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRating))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ratingR{}
		}
		if !queries.IsNil(object.RatedUserID) {
			args = append(args, object.RatedUserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ratingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RatedUserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RatedUserID) {
				args = append(args, obj.RatedUserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RatedUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RatedUserRatings = append(foreign.R.RatedUserRatings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RatedUserID, foreign.ID) {
				local.R.RatedUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RatedUserRatings = append(foreign.R.RatedUserRatings, local)
				break
			}
		}
	}

	return nil
}

// LoadTodo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ratingL) LoadTodo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRating interface{}, mods queries.Applicator) error {
	var slice []*Rating
	var object *Rating

	if singular {
		var ok bool
		object, ok = maybeRating.(*Rating)
		if !ok {
			object = new(Rating)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRating))
			}
		}
	} else {
		s, ok := maybeRating.(*[]*Rating)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRating)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRating))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ratingR{}
		}
		if !queries.IsNil(object.TodoID) {
			args = append(args, object.TodoID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ratingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TodoID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TodoID) {
				args = append(args, obj.TodoID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`todo`),
		qm.WhereIn(`todo.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Todo")
	}

	var resultSlice []*Todo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Todo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for todo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for todo")
	}

	if len(todoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Todo = foreign
		if foreign.R == nil {
			foreign.R = &todoR{}
		}
		foreign.R.Ratings = append(foreign.R.Ratings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TodoID, foreign.ID) {
				local.R.Todo = foreign
				if foreign.R == nil {
					foreign.R = &todoR{}
				}
				foreign.R.Ratings = append(foreign.R.Ratings, local)
				break
			}
		}
	}

	return nil
}

// SetRatedUser of the rating to the related item.
// Sets o.R.RatedUser to related.
// Adds o to related.R.RatedUserRatings.
func (o *Rating) SetRatedUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rating\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rated_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, ratingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RatedUserID, related.ID)
	if o.R == nil {
		o.R = &ratingR{
			RatedUser: related,
		}
	} else {
		o.R.RatedUser = related
	}

	if related.R == nil {
		related.R = &userR{
			RatedUserRatings: RatingSlice{o},
		}
	} else {
		related.R.RatedUserRatings = append(related.R.RatedUserRatings, o)
	}

	return nil
}

// RemoveRatedUser relationship.
// Sets o.R.RatedUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Rating) RemoveRatedUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.RatedUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("rated_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RatedUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RatedUserRatings {
		if queries.Equal(o.RatedUserID, ri.RatedUserID) {
			continue
		}

		ln := len(related.R.RatedUserRatings)
		if ln > 1 && i < ln-1 {
			related.R.RatedUserRatings[i] = related.R.RatedUserRatings[ln-1]
		}
		related.R.RatedUserRatings = related.R.RatedUserRatings[:ln-1]
		break
	}
	return nil
}

// SetTodo of the rating to the related item.
// Sets o.R.Todo to related.
// Adds o to related.R.Ratings.
func (o *Rating) SetTodo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Todo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rating\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"todo_id"}),
		strmangle.WhereClause("\"", "\"", 2, ratingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TodoID, related.ID)
	if o.R == nil {
		o.R = &ratingR{
			Todo: related,
		}
	} else {
		o.R.Todo = related
	}

	if related.R == nil {
		related.R = &todoR{
			Ratings: RatingSlice{o},
		}
	} else {
		related.R.Ratings = append(related.R.Ratings, o)
	}

	return nil
}

// RemoveTodo relationship.
// Sets o.R.Todo to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Rating) RemoveTodo(ctx context.Context, exec boil.ContextExecutor, related *Todo) error {
	var err error

	queries.SetScanner(&o.TodoID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("todo_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Todo = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Ratings {
		if queries.Equal(o.TodoID, ri.TodoID) {
			continue
		}

		ln := len(related.R.Ratings)
		if ln > 1 && i < ln-1 {
			related.R.Ratings[i] = related.R.Ratings[ln-1]
		}
		related.R.Ratings = related.R.Ratings[:ln-1]
		break
	}
	return nil
}

// Ratings retrieves all the records using an executor.
func Ratings(mods ...qm.QueryMod) ratingQuery {
	mods = append(mods, qm.From("\"rating\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rating\".*"})
	}

	return ratingQuery{q}
}

// FindRating retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRating(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Rating, error) {
	ratingObj := &Rating{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rating\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, ratingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "hyfdb: unable to select from rating")
	}

	if err = ratingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ratingObj, err
	}

	return ratingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rating) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("hyfdb: no rating provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ratingInsertCacheMut.RLock()
	cache, cached := ratingInsertCache[key]
	ratingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ratingAllColumns,
			ratingColumnsWithDefault,
			ratingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ratingType, ratingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rating\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rating\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "hyfdb: unable to insert into rating")
	}

	if !cached {
		ratingInsertCacheMut.Lock()
		ratingInsertCache[key] = cache
		ratingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Rating.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rating) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ratingUpdateCacheMut.RLock()
	cache, cached := ratingUpdateCache[key]
	ratingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ratingAllColumns,
			ratingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("hyfdb: unable to update rating, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rating\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ratingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, append(wl, ratingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to update rating row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: failed to get rows affected by update for rating")
	}

	if !cached {
		ratingUpdateCacheMut.Lock()
		ratingUpdateCache[key] = cache
		ratingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ratingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to update all for rating")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to retrieve rows affected for rating")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RatingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("hyfdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rating\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ratingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to update all in rating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to retrieve rows affected all in update all rating")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rating) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("hyfdb: no rating provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ratingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ratingUpsertCacheMut.RLock()
	cache, cached := ratingUpsertCache[key]
	ratingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ratingAllColumns,
			ratingColumnsWithDefault,
			ratingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ratingAllColumns,
			ratingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("hyfdb: unable to upsert rating, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ratingPrimaryKeyColumns))
			copy(conflict, ratingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rating\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ratingType, ratingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ratingType, ratingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "hyfdb: unable to upsert rating")
	}

	if !cached {
		ratingUpsertCacheMut.Lock()
		ratingUpsertCache[key] = cache
		ratingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Rating record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rating) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("hyfdb: no Rating provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ratingPrimaryKeyMapping)
	sql := "DELETE FROM \"rating\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to delete from rating")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: failed to get rows affected by delete for rating")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ratingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("hyfdb: no ratingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to delete all from rating")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: failed to get rows affected by deleteall for rating")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RatingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ratingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rating\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ratingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: unable to delete all from rating slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "hyfdb: failed to get rows affected by deleteall for rating")
	}

	if len(ratingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rating) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRating(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RatingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RatingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rating\".* FROM \"rating\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ratingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "hyfdb: unable to reload all in RatingSlice")
	}

	*o = slice

	return nil
}

// RatingExists checks if the Rating row exists.
func RatingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rating\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "hyfdb: unable to check if rating exists")
	}

	return exists, nil
}

// Exists checks if the Rating row exists.
func (o *Rating) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RatingExists(ctx, exec, o.ID)
}
