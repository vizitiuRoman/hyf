// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: hyf/v1/rating.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RatingSVC_GetRatings_FullMethodName   = "/RatingSVC/GetRatings"
	RatingSVC_GetRating_FullMethodName    = "/RatingSVC/GetRating"
	RatingSVC_CreateRating_FullMethodName = "/RatingSVC/CreateRating"
	RatingSVC_UpdateRating_FullMethodName = "/RatingSVC/UpdateRating"
	RatingSVC_DeleteRating_FullMethodName = "/RatingSVC/DeleteRating"
)

// RatingSVCClient is the client API for RatingSVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingSVCClient interface {
	GetRatings(ctx context.Context, in *GetRatingsIn, opts ...grpc.CallOption) (*GetRatingsOut, error)
	GetRating(ctx context.Context, in *GetRatingIn, opts ...grpc.CallOption) (*GetRatingOut, error)
	CreateRating(ctx context.Context, in *CreateRatingIn, opts ...grpc.CallOption) (*CreateRatingOut, error)
	UpdateRating(ctx context.Context, in *UpdateRatingIn, opts ...grpc.CallOption) (*UpdateRatingOut, error)
	DeleteRating(ctx context.Context, in *DeleteRatingIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ratingSVCClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingSVCClient(cc grpc.ClientConnInterface) RatingSVCClient {
	return &ratingSVCClient{cc}
}

func (c *ratingSVCClient) GetRatings(ctx context.Context, in *GetRatingsIn, opts ...grpc.CallOption) (*GetRatingsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRatingsOut)
	err := c.cc.Invoke(ctx, RatingSVC_GetRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingSVCClient) GetRating(ctx context.Context, in *GetRatingIn, opts ...grpc.CallOption) (*GetRatingOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRatingOut)
	err := c.cc.Invoke(ctx, RatingSVC_GetRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingSVCClient) CreateRating(ctx context.Context, in *CreateRatingIn, opts ...grpc.CallOption) (*CreateRatingOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRatingOut)
	err := c.cc.Invoke(ctx, RatingSVC_CreateRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingSVCClient) UpdateRating(ctx context.Context, in *UpdateRatingIn, opts ...grpc.CallOption) (*UpdateRatingOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRatingOut)
	err := c.cc.Invoke(ctx, RatingSVC_UpdateRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingSVCClient) DeleteRating(ctx context.Context, in *DeleteRatingIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RatingSVC_DeleteRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingSVCServer is the server API for RatingSVC service.
// All implementations must embed UnimplementedRatingSVCServer
// for forward compatibility.
type RatingSVCServer interface {
	GetRatings(context.Context, *GetRatingsIn) (*GetRatingsOut, error)
	GetRating(context.Context, *GetRatingIn) (*GetRatingOut, error)
	CreateRating(context.Context, *CreateRatingIn) (*CreateRatingOut, error)
	UpdateRating(context.Context, *UpdateRatingIn) (*UpdateRatingOut, error)
	DeleteRating(context.Context, *DeleteRatingIn) (*emptypb.Empty, error)
	mustEmbedUnimplementedRatingSVCServer()
}

// UnimplementedRatingSVCServer must hyf-service embedded to have
// forward compatible implementations.
//
// NOTE: this should hyf-service embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRatingSVCServer struct{}

func (UnimplementedRatingSVCServer) GetRatings(context.Context, *GetRatingsIn) (*GetRatingsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatings not implemented")
}
func (UnimplementedRatingSVCServer) GetRating(context.Context, *GetRatingIn) (*GetRatingOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedRatingSVCServer) CreateRating(context.Context, *CreateRatingIn) (*CreateRatingOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRating not implemented")
}
func (UnimplementedRatingSVCServer) UpdateRating(context.Context, *UpdateRatingIn) (*UpdateRatingOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedRatingSVCServer) DeleteRating(context.Context, *DeleteRatingIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRating not implemented")
}
func (UnimplementedRatingSVCServer) mustEmbedUnimplementedRatingSVCServer() {}
func (UnimplementedRatingSVCServer) testEmbeddedByValue()                   {}

// UnsafeRatingSVCServer may hyf-service embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingSVCServer will
// result in compilation errors.
type UnsafeRatingSVCServer interface {
	mustEmbedUnimplementedRatingSVCServer()
}

func RegisterRatingSVCServer(s grpc.ServiceRegistrar, srv RatingSVCServer) {
	// If the following call pancis, it indicates UnimplementedRatingSVCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RatingSVC_ServiceDesc, srv)
}

func _RatingSVC_GetRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingSVCServer).GetRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingSVC_GetRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingSVCServer).GetRatings(ctx, req.(*GetRatingsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingSVC_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingSVCServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingSVC_GetRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingSVCServer).GetRating(ctx, req.(*GetRatingIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingSVC_CreateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRatingIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingSVCServer).CreateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingSVC_CreateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingSVCServer).CreateRating(ctx, req.(*CreateRatingIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingSVC_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRatingIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingSVCServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingSVC_UpdateRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingSVCServer).UpdateRating(ctx, req.(*UpdateRatingIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingSVC_DeleteRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRatingIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingSVCServer).DeleteRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingSVC_DeleteRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingSVCServer).DeleteRating(ctx, req.(*DeleteRatingIn))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingSVC_ServiceDesc is the grpc.ServiceDesc for RatingSVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to hyf-service introspected or modified (even as a copy)
var RatingSVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingSVC",
	HandlerType: (*RatingSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRatings",
			Handler:    _RatingSVC_GetRatings_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _RatingSVC_GetRating_Handler,
		},
		{
			MethodName: "CreateRating",
			Handler:    _RatingSVC_CreateRating_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _RatingSVC_UpdateRating_Handler,
		},
		{
			MethodName: "DeleteRating",
			Handler:    _RatingSVC_DeleteRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hyf/v1/rating.proto",
}
