// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auth/v1/user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserSVC_GetUsers_FullMethodName   = "/UserSVC/GetUsers"
	UserSVC_GetUser_FullMethodName    = "/UserSVC/GetUser"
	UserSVC_UpdateUser_FullMethodName = "/UserSVC/UpdateUser"
	UserSVC_DeleteUser_FullMethodName = "/UserSVC/DeleteUser"
)

// UserSVCClient is the client API for UserSVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSVCClient interface {
	GetUsers(ctx context.Context, in *GetUsersIn, opts ...grpc.CallOption) (*GetUsersOut, error)
	GetUser(ctx context.Context, in *GetUserIn, opts ...grpc.CallOption) (*GetUserOut, error)
	UpdateUser(ctx context.Context, in *UpdateUserIn, opts ...grpc.CallOption) (*UpdateUserOut, error)
	DeleteUser(ctx context.Context, in *DeleteUserIn, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userSVCClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSVCClient(cc grpc.ClientConnInterface) UserSVCClient {
	return &userSVCClient{cc}
}

func (c *userSVCClient) GetUsers(ctx context.Context, in *GetUsersIn, opts ...grpc.CallOption) (*GetUsersOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersOut)
	err := c.cc.Invoke(ctx, UserSVC_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) GetUser(ctx context.Context, in *GetUserIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, UserSVC_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) UpdateUser(ctx context.Context, in *UpdateUserIn, opts ...grpc.CallOption) (*UpdateUserOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserOut)
	err := c.cc.Invoke(ctx, UserSVC_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSVCClient) DeleteUser(ctx context.Context, in *DeleteUserIn, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserSVC_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSVCServer is the server API for UserSVC service.
// All implementations must embed UnimplementedUserSVCServer
// for forward compatibility.
type UserSVCServer interface {
	GetUsers(context.Context, *GetUsersIn) (*GetUsersOut, error)
	GetUser(context.Context, *GetUserIn) (*GetUserOut, error)
	UpdateUser(context.Context, *UpdateUserIn) (*UpdateUserOut, error)
	DeleteUser(context.Context, *DeleteUserIn) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserSVCServer()
}

// UnimplementedUserSVCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserSVCServer struct{}

func (UnimplementedUserSVCServer) GetUsers(context.Context, *GetUsersIn) (*GetUsersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserSVCServer) GetUser(context.Context, *GetUserIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserSVCServer) UpdateUser(context.Context, *UpdateUserIn) (*UpdateUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserSVCServer) DeleteUser(context.Context, *DeleteUserIn) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserSVCServer) mustEmbedUnimplementedUserSVCServer() {}
func (UnimplementedUserSVCServer) testEmbeddedByValue()                 {}

// UnsafeUserSVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSVCServer will
// result in compilation errors.
type UnsafeUserSVCServer interface {
	mustEmbedUnimplementedUserSVCServer()
}

func RegisterUserSVCServer(s grpc.ServiceRegistrar, srv UserSVCServer) {
	// If the following call pancis, it indicates UnimplementedUserSVCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserSVC_ServiceDesc, srv)
}

func _UserSVC_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSVC_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).GetUsers(ctx, req.(*GetUsersIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSVC_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).GetUser(ctx, req.(*GetUserIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSVC_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).UpdateUser(ctx, req.(*UpdateUserIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSVC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSVCServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSVC_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSVCServer).DeleteUser(ctx, req.(*DeleteUserIn))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSVC_ServiceDesc is the grpc.ServiceDesc for UserSVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserSVC",
	HandlerType: (*UserSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UserSVC_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserSVC_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserSVC_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserSVC_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/user.proto",
}
